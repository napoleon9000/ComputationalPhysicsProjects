
import numpy as np
import scipy.linalg as la
import matplotlib.pyplot as plt
import time


# Gaussian Elimination
fig1 = plt.figure()
fig2 = plt.figure()

# Define the test case
testcase = (10, 10, 10)
print 'Gaussian Elimination'

# Loop for different number of points
for m in testcase:

    # define variables
    n = m
    d1 = 2
    e1 = -1
    h = 1 / (float(n+1) - 1)
    d = d1 * np.ones((1, n+1))  # Diagonal
    e = e1 * np.ones((1, n))  # Diagonal-1
    x = (np.arange(n + 1.0)) / n  # x
    f = (h ** 2.0) * 100.0 * np.exp(-10.0 * x)  # fi
    u = np.zeros((1, n+1))

    start = time.clock()                   # Start counting time
    # Forward Substitution
    for i in xrange(1, n+1):
        d[0, i] = d[0, i] - e[0, i - 1] / d[0, i - 1] * e[0, i - 1]
        f[i] = f[i] - e[0, i - 1] / d[0, i - 1] * f[i - 1]

    # Backward Substitution
    u[0, n] = f[n] / d[0, n]
    for i in range(n-1, -1, -1):
        u[0, i] = (f[i] - e[0, i] * u[0, i + 1]) / d[0, i]
    finish = time.clock()                  # End counting time

    # Exact solution and error
    x = (np.arange(n + 1.0)) / n
    x = x[range(1, n)]                     # Delete 0 in the denominator
    u = u[0,range(1,n)]                    # Delete corresponding u
    u_exact = 1.0-(1.0-np.exp(-10.0))*x-np.exp(-10.0*x)
    u_exact.reshape((1, n-1))
    e = np.log10((u-u_exact)/u_exact)      # error

    # Plot
    plt.figure(1)
    plt.plot(x, u, 'o', label=m)
    plt.figure(2)
    plt.plot(x, e, label=m)
    plt.legend()

    print 'time for Gaussian Elimination is ', finish - start, 's'

plt.figure(1)
plt.title('Calculation results')
plt.plot(x, u_exact, label='exact')
plt.legend()
plt.figure(2)
plt.title('Relative error')

# Loop for Lu Decomposition
print 'LU Decomposition'
for m in testcase:
    # Generate the full matrix
    A = np.diag(2*np.ones(m+1), 0) + np.diag(-1*np.ones(m), 1) + np.diag(-1*np.ones(m), -1)
    # Variables initialization
    x = (np.arange(m + 1.0)) / m
    h = 1 / (float(m+1) - 1)
    f = (h ** 2.0) * 100.0 * np.exp(-10.0 * x)  # fi

    # Solve using lib
    start = time.clock()
    LU = la.lu_factor(A)
    X = la.lu_solve(LU, f)
    finish = time.clock()

    # Calculate the errors
    x = x[range(1, m)]                        # Delete 0 in denominator
    X = X[range(1, m)]
    u_exact = 1-(1-np.exp(-10.0))*x-np.exp(-10.0*x)
    #u_exact.reshape((1, m+1))
    #u_exact = u_exact[1:m]
    e2 = np.log10(np.abs(X-u_exact)/u_exact)

    print 'time for LU is ', finish - start, 's'

    # Plot
    plt.figure(3)
    plt.plot(x, X, 'o', label=m)
    plt.figure(4)
    plt.plot(x, e2, label=m)
    plt.legend()

plt.figure(3)
plt.plot(x, u_exact, label='exact')
plt.legend()
plt.show()