#!/usr/bin/env python
import numpy as np
import scipy.linalg as la
import matplotlib.pyplot as plt
import datetime as dt

# Gaussian Elimination
fig1 = plt.figure()
fig2 = plt.figure()
testcase = (10, 100, 1000)
print 'Gaussian Elimination'
for m in testcase:

    # define variables
    n = m
    d1 = 2
    e1 = -1
    h = 1 / (float(n+1) - 1)
    d = d1 * np.ones((1, n+1))  # Diagonal
    e = e1 * np.ones((1, n))  # Diagonal-1
    x = (np.arange(n + 1.0)) / n  # x
    f = (h ** 2.0) * 100.0 * np.exp(-10.0 * x)  # fi
    u = np.zeros((1, n+1))

    recordTime = dt.datetime.now()
    # Forward Substitution
    for i in xrange(1, n+1):
        d[0, i] = d[0, i] - e[0, i - 1] / d[0, i - 1] * e[0, i - 1]
        f[i] = f[i] - e[0, i - 1] / d[0, i - 1] * f[i - 1]

    # Backward Substitution
    u[0, n] = f[n] / d[0, n]
    for i in range(n-1, -1, -1):
        u[0, i] = (f[i] - e[0, i]  * u[0, i + 1]) / d[0, i]

    recordTime = dt.datetime.now()-recordTime
    # Exact solution and error
    x = (np.arange(n + 1.0)) / n
    Eu = 1-(1-np.exp(-10.0))*x-np.exp(-10.0*x)
    Eu.reshape((1,n+1))
    e = np.log10(u-Eu)

    # Plot
    plt.figure(1)
    plt.plot(x, u[0, :], 'o')
    plt.figure(2)
    plt.plot(x,e[0, :])

    print 'Time for Gaussian Elimination: %f', recordTime

plt.figure(1)
plt.title('Calculation results')
plt.plot(x, Eu[:])
plt.figure(2)
plt.title('Relative error')
plt.show()
# Lu Decomposition
print 'Simplified LU Decomposition'





print 'LU Decomposition using numpy'
for m in testcase:
    A = np.diag(2*np.ones(m), 0) + np.diag(-1*np.ones(m-1), 1) + np.diag(-1*np.ones(m-1), -1)
#    print A
    x = (np.arange(n + 1.0)) / n  # x
    f = (h ** 2.0) * 100.0 * np.exp(-10.0 * x)  # fi

#    print A
    recordTime = dt.datetime.now()
    P, L, U = la.lu(A)
    recordTime = dt.datetime.now()-recordTime
    print 'Time for Lu Decomposition: ', recordTime
#    print P
#    print L
#    print U
